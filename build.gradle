import java.lang.invoke.LambdaForm.Compiled

buildscript {
	repositories {
		maven { url 'http://maven.aliyun.com/nexus/content/groups/public/'}
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE")
	}
}

//加上后边的配置 子项目就生效了
configure(subprojects) { project ->
	apply from: file("${rootProject.rootDir}/gradle/shared.gradle")
  
	repositories {
	  maven { url 'http://maven.aliyun.com/nexus/content/groups/public/'}
	  jcenter()
	}
  
	sourceCompatibility = javaVersion
	targetCompatibility = javaVersion
  
	group = 'com.jupiter'
	version = '0.0.1'
  
	eclipse.classpath {
	  containers.remove 'org.eclipse.jdt.launching.JRE_CONTAINER'
	  containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-${javaVersion}"
	}
  }


apply plugin: 'java'
apply plugin: 'eclipse'

jar {
	baseName = 'jupiter-spring-boot'
	version =  '0.1.0'
}

repositories {
	maven { url 'http://maven.aliyun.com/nexus/content/groups/public/'}
	mavenCentral()
	maven { url crawlerRep }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configure(subprojects.findAll { it.name.startsWith('jupiter-')}) {
	apply plugin: 'org.springframework.boot'
	
	dependencies {
		compile("org.springframework.boot:spring-boot-starter:${springBootVersion}")
		compile("org.springframework.boot:spring-boot:${springBootVersion}")
		compile ("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.0.0")
		
		compile "org.slf4j:log4j-over-slf4j:${sl4j_version}"
		compile "org.slf4j:slf4j-api:${sl4j_version}"
		compile "commons-net:commons-net:${commons_net_version}"
		compile "commons-io:commons-io:${commons_io_version}"
		compile "org.apache.commons:commons-lang3:${commons_lang3_version}"
		compile "com.alibaba:fastjson:${alibaba_fastjson_version}"
		compile "mysql:mysql-connector-java:${mysql_version}"
		compile 'org.mybatis.generator:mybatis-generator-core:1.3.2'
		
		testCompile("junit:junit")
		testCompile 'org.springframework.boot:spring-boot-starter-test'
	}
}

subprojects {
	task allDeps(type: DependencyReportTask) {}
}
